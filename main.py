import argparse
import os
from openai import OpenAI
from PIL import Image
import requests
from io import BytesIO
import csv
import json

## Set the API key
client = OpenAI(api_key=OPENAI_API_KEY)

def get_personal_data(idx):
    with open("synthetic_customer_data.csv", 'r') as f:
        reader = csv.DictReader(f)
        data = [row for row in reader]
    return data[idx]

# Generating prompts to generate personalized ad campaigns
def gen_prompts_to_gen_ad_campaign(prompt):
    MODEL="gpt-4o-mini"

    completion = client.chat.completions.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "You are a helpful assistant that helps me with creating prompt to generate visual personalized campaign!"},
            {"role": "user", "content": prompt}
        ]
    )

    return completion.choices[0].message.content

# Generating personalized ad campaigns
def gen_ad_campaign(prompt, dim):
    MODEL="dall-e-3"
    try:
        response = client.images.generate(
            model=MODEL,            # Specify the model
            prompt=prompt,          # The text prompt for image generation
            size=dim,               # Dimension of the generated image
            quality="standard",     # Image quality
            n=1,                    # Number of images to generate
        )
        # Extract the URL of the generated image
        image_url = response.data[0].url
        return image_url
    except:
        return ""

def main(args):
    # Process the arguments
    # Check if the integer argument is within the defined range
    idx = args.index
    if idx < 0 or idx > 49:
        print("Error: Number must be between 0 and 49.")
        return
    
    print(f"The data index, {idx}!")
    
    ## Step 1
    # Get personal data of one customer, one row in the csv file
    personal_data = get_personal_data(idx)
    personal_data_str = "\n".join([f"{key}: {value}" for key, value in personal_data.items()])
    
    # create a prompt for gpt-4o-mini to generate personalized prompts for dall-e-3.  
    prompt = f"Generate 5 prompts to create personalized visual campaigns of bank personal loan product. Use the following personal data of the customer:\n" \
                 f"{personal_data_str}\n\n" \
                 f"Format the output as a json."
    
    ## Step 2
    ad_campaign_prompts = gen_prompts_to_gen_ad_campaign(prompt)
    ad_campaign_prompts = ad_campaign_prompts.replace("```json", '')
    ad_campaign_prompts = ad_campaign_prompts.replace("```", '')
    ad_campaign_prompts_dict = json.loads(ad_campaign_prompts) # These are the prompts generated by gpt-4o-mini using personal data
    dict_keys = list(ad_campaign_prompts_dict.keys())

    ## Step 3
    # Create personalized ad campaigns (digital images) using the prompts generated in Step 2
    for i, ad_campaign_prompt in enumerate(ad_campaign_prompts_dict[dict_keys[0]]):
        p_prompt = ad_campaign_prompt["prompt"]
        
        #Generate ad campaign for desktop
        image_url_desktop = gen_ad_campaign(p_prompt, "1792x1024")
        if image_url_desktop != "":
            response_desktop = requests.get(image_url_desktop)
            image_desktop = Image.open(BytesIO(response_desktop.content))
            image_desktop.save("./output/Desktop/" + str(i) + '.png')
        
        #Generate ad campaign for mobile
        image_url_mobile = gen_ad_campaign(p_prompt, "1024x1792")
        if image_url_mobile != "":
            response_mobile = requests.get(image_url_mobile)
            image_mobile = Image.open(BytesIO(response_mobile.content))
            image_mobile.save("./output/Mobile/" + str(i) + '.png')

if __name__ == "__main__":
    # Create the parser
    parser = argparse.ArgumentParser()

    # Add arguments
    parser.add_argument("-i", "--index", type=int, required=True, help="Data index integer in the range 0 to 49")
    
    # Parse the arguments
    args = parser.parse_args()

    # Call the main function with parsed arguments
    main(args)
